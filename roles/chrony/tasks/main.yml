---
# tasks file for chrony

- name: Create chrony directory
  file:
    path: "{{ chrony_dir }}"
    state: directory

# 1. get a list of the machineconfigs and store them in r_existing_machineconfig

- name: Retrieve existing MachineConfigs
  k8s_facts:
    api_version: machineconfiguration.openshift.io/v1
    kind: MachineConfig
  register: r_existing_machineconfig
  environment:
    KUBECONFIG: "{{ lookup('env', 'HOME') }}/openstack-upi/auth/kubeconfig"

# 2. Create new chrony machineconfig

- name: Create MachineConfig for Master
  k8s:
    state: present
    definition: "{{ lookup('template', '99_masters-chrony-configuration.yaml.j2') }}"

- name: Create MachineConfig for Worker
  k8s:
    state: present
    definition: "{{ lookup('template', '99_workers-chrony-configuration.yaml.j2') }}"

### NOT FINISHED - to be fixed ###
## 3. Get a new list of the machineconfigs and store them in r_new_machineconfig and run an until loop over them until you see the new rendered configs
#
#- name: Retrieve new MachineConfigs
#  k8s_facts:
#    api_version: machineconfiguration.openshift.io/v1
#    kind: MachineConfig
#  register: r_new_machineconfig
#  environment:
#    KUBECONFIG: "{{ lookup('env', 'HOME') }}/openstack-upi/auth/kubeconfig"
#  vars:
#    existing_machineconfig_list: "{{ r_existing_machineconfig.resources | map(attribute='metadata.name') | list }}"
#    new_machineconfig_list: "{{ r_new_machineconfig.resources | map(attribute='metadata.name') | list }}"
#  until:
#    - existing_machineconfig_list | intersect(new_machineconfig_list) | length == 0
#  retries: 20
#  delay: 10
#
#- name: Check that MachineConfigs are updated on all nodes
#  k8s_facts:
#    api_version: machineconfiguration.openshift.io/v1
#    kind: MachineConfigPool
#  register: r_machineconfigpool
#  vars:
#    r_machineconfigpool_status: r_machineconfigpool.resources |  json_query(status_query) | flatten | unique
#    status_query: status.conditions[?type=='Updated'].status
#   # status_query: "resources[*].status.conditions[?type=='Updated'].status"
#   # update_status: "{{ r_machineconfigpool | json_query('resources[].status.conditions.) | flatten | unique }}"
#  until:
#    - update_status == ['True']
#  retries: 60 # wait for 1 hour max
#  delay: 60


#### NOT FINISHED - to add checks for each node's desiredConfig == currentConfig ###
#
## 4. Get a list of nodes and store them in r_node_existing_machineconfig and loop through them until you see desired == new rendered
#
#- name: Retrieve nodes
#  k8s_facts:
#    api_version: v1
#    kind: Node
#  register: r_check_nodes
#  environment:
#    KUBECONFIG: "{{ lookup('env', 'HOME') }}/openstack-upi/auth/kubeconfig"
#
#- debug:
#    var: r_check_nodes
#
#### TODO: master_new_config var
#
#- name: Check that master nodes have desiredConfig == new rendered
#  k8s_facts:
#    api_version: v1
#    kind: Node
#    label_selectors:
#    - node-role.kubernetes.io/master
#  register: r_check_master_nodes_desired_config
#  retries: 20
#  delay: 30
#  until:
#    - r_check_master_nodes_desired_config.resources | json_query(master_desired_config) == master_new_config 
#  vars:
#    master_desired_config: >-
#      [?metadata.annotations."machineconfiguration.openshift.io/desiredConfig"]
#
#### TODO: worker_new_config var
#
#- name: Check that worker nodes have desiredConfig == new rendered
#  k8s_facts:
#    api_version: v1
#    kind: Node
#    label_selectors:
#    - node-role.kubernetes.io/worker
#  register: r_check_worker_nodes_desired_config
#  retries: 20
#  delay: 30
#  until:
#    - r_check_worker_nodes_desired_config.resources | json_query(worker_desired_config) | length == worker_new_config
#  vars:
#    worker_desired_config: >-
#      [?metadata.annotations."machineconfiguration.openshift.io/desiredConfig"]
#
### TODO: check for current==desired
#
#- name: Check that master nodes have currentConfig == desiredConfig
#  k8s_facts:
#    api_version: v1
#    kind: Node
#    label_selectors:
#    - node-role.kubernetes.io/master
#  register: r_check_master_nodes_current_config
#  retries: 20
#  delay: 30
#  until:
#    - r_check_master_nodes_current_config.resources | json_query(master_current_config) == r_check_nodes.resources | json_query(master_desired_config)
#  vars:
#    master_desired_config: >-
#      [?metadata.annotations."machineconfiguration.openshift.io/desiredConfig"]
#    master_current_config: >-
#      [?metadata.annotations."machineconfiguration.openshift.io/currentConfig"]
#
### TODO: check for current==desired
#
#- name: Check that worker nodes have currentConfig == desiredConfig
#  k8s_facts:
#    api_version: v1
#    kind: Node
#    label_selectors:
#    - node-role.kubernetes.io/worker
#  register: r_check_worker_nodes_current_config
#  retries: 20
#  delay: 30
#  until:
#    - r_check_worker_nodes_current_config.resources | json_query(worker_current_config) == r_check_nodes.resources | json_query(worker_desired_config)
#  vars:
#    worker_desired_config: >-
#      [?metadata.annotations."machineconfiguration.openshift.io/desiredConfig"]
#    worker_current_config: >-
#      [?metadata.annotations."machineconfiguration.openshift.io/currentConfig"]
